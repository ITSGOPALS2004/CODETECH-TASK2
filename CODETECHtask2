# Import necessary libraries
import pandas as pd
import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Download necessary NLTK resources (if not already downloaded)
nltk.download('stopwords')

# Step 1: Load dataset (Example: IMDB dataset with 'text' and 'sentiment' columns)
# The dataset should have 'text' for review text and 'sentiment' (positive/negative) labels
df = pd.read_csv('IMDB_reviews.csv')

# Step 2: Data Cleaning
# Removing missing values (if any)
df.dropna(subset=['text', 'sentiment'], inplace=True)

# Removing duplicate reviews
df.drop_duplicates(subset=['text'], inplace=True)

# Step 3: Text Preprocessing
# Function to clean and preprocess the text
def preprocess_text(text):
    # Convert text to lowercase
    text = text.lower()  
    # Remove special characters and digits using regular expression
    text = re.sub(r'[^a-zA-Z\s]', '', text)  
    # Remove stopwords
    text = ' '.join([word for word in text.split() if word not in stopwords.words('english')])
    return text

# Apply the preprocessing function to the 'text' column
df['cleaned_text'] = df['text'].apply(preprocess_text)

# Step 4: Feature Extraction
# Convert the cleaned text data into numerical features using CountVectorizer
vectorizer = CountVectorizer(max_features=5000)  # Limit to top 5000 words
X = vectorizer.fit_transform(df['cleaned_text']).toarray()  # Feature matrix
y = df['sentiment'].map({'positive': 1, 'negative': 0}).values  # Target labels (1 = positive, 0 = negative)

# Step 5: Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 6: Train the Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Step 7: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 8: Evaluate the model's performance
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=['Negative', 'Positive']))

# Step 9: Visualize the model's performance (optional)
# Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
fig, ax = plt.subplots(figsize=(6,6))
ax.matshow(cm, cmap='Blues', alpha=0.7)
for i in range(cm.shape[0]):
    for j in range(cm.shape[1]):
        ax.text(x=j, y=i, s=cm[i, j], va='center', ha='center', fontsize=16)
plt.title("Confusion Matrix", fontsize=20)
plt.ylabel("Actual", fontsize=16)
plt.xlabel("Predicted", fontsize=16)
plt.show()
